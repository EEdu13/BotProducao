import pyodbc
import re
import hashlib
import os
from openai import OpenAI
from datetime import datetime
import json
import pytz  # Para timezone de Bras√≠lia

# Configura√ß√£o de timezone
TIMEZONE_BRASILIA = pytz.timezone('America/Sao_Paulo')

def obter_data_brasilia():
    """Obt√©m data/hora atual no timezone de Bras√≠lia"""
    return datetime.now(TIMEZONE_BRASILIA)

def formatar_data_amigavel(data_str):
    """
    Converte data do formato SQL (2025-08-15 05:05:59.063) 
    para formato brasileiro (15/08/2025 05:05)
    """
    try:
        if not data_str:
            return ""
        
        # Se j√° est√° no formato brasileiro, retorna como est√°
        if "/" in str(data_str):
            return str(data_str)
        
        # Converter string para datetime
        if isinstance(data_str, str):
            # Tentar diferentes formatos
            formatos = [
                '%Y-%m-%d %H:%M:%S',  # 2025-08-15 05:05:59
                '%Y-%m-%d',           # 2025-08-15
                '%d/%m/%Y %H:%M',     # 15/08/2025 05:05
                '%d/%m/%Y'            # 15/08/2025
            ]
            
            data_obj = None
            for formato in formatos:
                try:
                    # Remover microsegundos se existirem
                    data_limpa = data_str.split('.')[0]
                    data_obj = datetime.strptime(data_limpa, formato)
                    break
                except ValueError:
                    continue
            
            if data_obj is None:
                print(f"[DATA] ‚ö†Ô∏è Formato n√£o reconhecido: {data_str}")
                return str(data_str)
        else:
            data_obj = data_str
        
        # Ajustar para timezone de Bras√≠lia se necess√°rio
        if data_obj.tzinfo is None:
            data_obj = TIMEZONE_BRASILIA.localize(data_obj)
        
        # Formata√ß√£o brasileira
        return data_obj.strftime('%d/%m/%Y %H:%M')
    except Exception as e:
        print(f"[DATA] ‚ö†Ô∏è Erro ao formatar data {data_str}: {e}")
        return str(data_str)

# Configura√ß√µes do banco de dados
DB_SERVER = os.environ.get('DB_SERVER', 'alrflorestal.database.windows.net')
DB_DATABASE = os.environ.get('DB_DATABASE', 'Tabela_teste')
DB_USERNAME = os.environ.get('DB_USERNAME', 'sqladmin')
DB_PASSWORD = os.environ.get('DB_PASSWORD')

# Configura√ß√£o OpenAI
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
client = None

print(f"[INIT] Inicializando cliente OpenAI...")
print(f"[INIT] API Key presente: {'Sim' if OPENAI_API_KEY else 'N√£o'}")

if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        print(f"[INIT] ‚úÖ Cliente OpenAI configurado com sucesso")
    except Exception as e:
        print(f"[INIT] ‚ùå Erro ao configurar OpenAI: {e}")
        client = None
else:
    print(f"[INIT] ‚ùå OPENAI_API_KEY n√£o encontrada")

# Configura√ß√µes Z-API para notifica√ß√µes
INSTANCE_ID = os.environ.get('INSTANCE_ID')
TOKEN = os.environ.get('TOKEN')
CLIENT_TOKEN = os.environ.get('CLIENT_TOKEN')

def conectar_db():
    """Conecta ao banco de dados SQL Server Azure"""
    try:
        drivers = [
            '{ODBC Driver 18 for SQL Server}',
            '{ODBC Driver 17 for SQL Server}',
            '{ODBC Driver 13 for SQL Server}',
            '{FreeTDS}'
        ]
        
        connection_string_base = (
            f'SERVER={DB_SERVER};'
            f'DATABASE={DB_DATABASE};'
            f'UID={DB_USERNAME};'
            f'PWD={DB_PASSWORD};'
            f'TrustServerCertificate=yes;'
        )
        
        for driver in drivers:
            try:
                connection_string = f'DRIVER={driver};{connection_string_base}'
                conn = pyodbc.connect(connection_string, timeout=30)
                return conn
            except Exception:
                continue
        
        raise Exception("Nenhum driver ODBC dispon√≠vel funcionou")
        
    except Exception as e:
        print(f"[ERRO] Falha na conex√£o SQL: {e}")
        raise

def detectar_pre_apontamento(texto):
    """Detecta se a mensagem √© um pr√©-apontamento baseado em palavras-chave"""
    texto_lower = texto.lower()
    
    print(f"[DETECT] üîç Analisando texto: {len(texto)} chars")
    print(f"[DETECT] Primeiros 200 chars: {texto[:200]}")
    
    # Indicadores principais
    indicadores_principais = ['data:', 'projeto:', 'empresa:', 'servi√ßo:', 'fazenda:', 'talh√£o:']
    
    # Separadores caracter√≠sticos
    separadores = ['-------------', '---', '========']
    
    # Contar indicadores encontrados
    indicadores_encontrados = []
    for ind in indicadores_principais:
        if ind in texto_lower:
            indicadores_encontrados.append(ind)
    
    separadores_encontrados = []
    for sep in separadores:
        if sep in texto:
            separadores_encontrados.append(sep)
    
    print(f"[DETECT] Indicadores encontrados ({len(indicadores_encontrados)}): {indicadores_encontrados}")
    print(f"[DETECT] Separadores encontrados ({len(separadores_encontrados)}): {separadores_encontrados}")
    
    # Regra: pelo menos 3 indicadores principais OU pelo menos 2 separadores
    resultado = len(indicadores_encontrados) >= 3 or len(separadores_encontrados) >= 2
    print(f"[DETECT] ‚úÖ √â pr√©-apontamento: {resultado}")
    
    return resultado

def gerar_hash_mensagem(texto, telefone):
    """Gera hash √∫nico para evitar duplica√ß√£o"""
    conteudo = f"{telefone}_{texto}_{datetime.now().strftime('%Y%m%d%H')}"
    return hashlib.md5(conteudo.encode()).hexdigest()

def salvar_raw(telefone, conteudo_bruto, hash_msg):
    """Salva o pr√©-apontamento bruto na tabela PRE_APONTAMENTO_RAW"""
    try:
        print(f"[SQL] üîÑ Conectando ao banco...")
        conn = conectar_db()
        cursor = conn.cursor()
        
        print(f"[SQL] üìù Preparando inser√ß√£o...")
        print(f"[SQL] Telefone: {telefone}")
        print(f"[SQL] Hash: {hash_msg}")
        print(f"[SQL] Conte√∫do (primeiros 100 chars): {conteudo_bruto[:100]}")
        
        query = """
        INSERT INTO PRE_APONTAMENTO_RAW (PHONE, CONTEUDO_BRUTO, HASH, STATUS, CREATED_AT)
        VALUES (?, ?, ?, 'PENDENTE', ?)
        """
        
        data_brasilia = obter_data_brasilia()
        print(f"[SQL] üìÖ Data/hora Bras√≠lia: {data_brasilia}")
        print(f"[SQL] üöÄ Executando INSERT...")
        cursor.execute(query, (telefone, conteudo_bruto, hash_msg, data_brasilia))
        print(f"[SQL] ‚úÖ INSERT executado com sucesso")
        
        conn.commit()
        print(f"[SQL] ‚úÖ COMMIT realizado")
        
        # Recuperar o ID inserido usando HASH (mais confi√°vel)
        print(f"[SQL] üîç Recuperando ID pelo HASH...")
        cursor.execute("SELECT ID FROM PRE_APONTAMENTO_RAW WHERE HASH = ? ORDER BY CREATED_AT DESC", (hash_msg,))
        resultado = cursor.fetchone()
        
        print(f"[SQL] Resultado busca por HASH: {resultado}")
        
        if resultado and resultado[0]:
            raw_id = int(resultado[0])
            print(f"[SQL] ‚úÖ RAW salvo com ID: {raw_id}")
        else:
            print(f"[SQL] ‚ùå Falha ao recuperar ID inserido")
            conn.close()
            return None
        
        conn.close()
        return raw_id
        
    except Exception as e:
        print(f"[ERRO] Falha ao salvar RAW: {e}")
        import traceback
        traceback.print_exc()
        return None

def extrair_dados_com_openai(texto):
    """Usa OpenAI para extrair e estruturar os dados do pr√©-apontamento"""
    try:
        print(f"[OPENAI] üöÄ Iniciando extra√ß√£o de dados...")
        
        if not client:
            print(f"[OPENAI] ‚ùå Cliente OpenAI n√£o configurado")
            return None
            
        if not OPENAI_API_KEY:
            print(f"[OPENAI] ‚ùå API Key n√£o dispon√≠vel")
            return None
            
        print(f"[OPENAI] ‚úÖ Cliente dispon√≠vel, preparando prompt...")
        print(f"[OPENAI] Texto a processar (primeiros 300 chars): {texto[:300]}")
        
        prompt = f"""
Voc√™ √© um especialista em extra√ß√£o de dados de pr√©-apontamentos agr√≠colas.

INSTRU√á√ïES IMPORTANTES:
1. Extraia TODOS os dados encontrados no texto
2. Aplique corre√ß√µes autom√°ticas de ortografia e formata√ß√£o:
   - "larzil" ‚Üí "LARSIL" 
   - "furmiga" ‚Üí "FORMIGA"
   - "tal√£o" ‚Üí "TALH√ÉO"
   - Nomes de fazendas devem estar em MAI√öSCULAS
   - C√≥digos t√©cnicos como "TALH√ÉO: 001" devem manter formato "CAMPO: VALOR"
3. DATAS: Se encontrar "HOJE", "DATA: HOJE" ou similar, use "{datetime.now().strftime('%Y-%m-%d')}"
4. PR√äMIOS/RATEIO: Extrair TODOS os colaboradores das se√ß√µes:
   - "RATEIO PRODU√á√ÉO MANUAL" ‚Üí categoria "RATEIO_MANUAL" 
   - "EQUIPE APOIO ENVOLVIDA" ‚Üí categoria "APOIO" 
   - "ESTRUTURA APOIO ENVOLVIDA" ‚Üí categoria "ESTRUTURA"
   - IMPORTANTE: Extrair CADA LINHA que tenha c√≥digo, mesmo sem produ√ß√£o ap√≥s h√≠fen
5. C√ìDIGOS: REGRA IMPORTANTE para colaborador_id vs equipamento:
   - C√≥digos num√©ricos (ex: 2508, 2689, 0528) = COLABORADORES ‚Üí "colaborador_id"
   - C√≥digos TP (ex: TP001, TP009) = EQUIPAMENTOS ‚Üí "equipamento"
   - Para categoria APOIO com TP: colaborador_id=null, equipamento="TP001"
   - Para categoria RATEIO_MANUAL: colaborador_id="2508", equipamento=null
   - Para categoria ESTRUTURA com "TP001 - 2508": equipamento="TP001" E colaborador_id="2508"
   - Para categoria ESTRUTURA: extrair c√≥digo COMPLETO do colaborador (ex: se aparecer "05" extrair registro completo como "0528")
6. EXTRA√á√ÉO DE COLABORADORES:
   - Sempre extrair o c√≥digo COMPLETO do colaborador, n√£o apenas prefixos
   - Se encontrar c√≥digo parcial (ex: "05"), buscar no contexto o c√≥digo completo
   - Para ESTRUTURA, verificar se h√° padr√£o de c√≥digos similares para completar
   - QUEBRAS DE LINHA: WhatsApp mobile pode quebrar linhas, ent√£o:
     * "TP001 - 2508 - premio\nMOTORISTA" = equipamento:"TP001", colaborador_id:"2508", funcao:"MOTORISTA"
     * Sempre procurar a linha seguinte para fun√ß√£o se n√£o estiver na mesma linha
     * Se c√≥digo TP estiver junto com n√∫mero (ex: TP001 - 2508), ambos s√£o v√°lidos
7. EXEMPLO de extra√ß√£o correta:
   RATEIO PRODU√á√ÉO MANUAL
   2508 - 
   2509 - 
   2510 - 
   Deve gerar 3 pr√™mios com categoria RATEIO_MANUAL e colaborador_id respectivos
   
   EXEMPLO ESTRUTURA com quebra de linha:
   ESTRUTURA APOIO ENVOLVIDA
   TP001 - 2508 - premio
   MOTORISTA
   Deve gerar: categoria:"ESTRUTURA", equipamento:"TP001", colaborador_id:"2508", funcao:"MOTORISTA", recebe_premio:1
   
   EXEMPLO INSUMOS:
   LOTE: ABC123 INSUMO: HERBICIDA QUANTIDADE: 2.5
   LOTE: DEF456 INSUMO: FERTILIZANTE QUANTIDADE: 10
   Deve gerar: lote1:"ABC123", insumo1:"HERBICIDA", quantidade1:2.5, lote2:"DEF456", insumo2:"FERTILIZANTE", quantidade2:10
8. Para cada colaborador: c√≥digo, produ√ß√£o (n√∫mero ap√≥s h√≠fen), fun√ß√£o (texto ap√≥s PREMIO ou linha seguinte)
9. RECEBE_PREMIO: 1 se tem "PREMIO", 0 se vazio
10. CATEGORIA ESTRUTURA: Sempre tem equipamento E colaborador_id quando aparece "TP### - #### - premio"
11. Se algum campo estiver em branco, deixe como string vazia ""

TEXTO PARA PROCESSAR:
{texto}

RESPONDA APENAS COM JSON V√ÅLIDO no formato:
{{
  "boletim": {{
    "data_execucao": "{datetime.now().strftime('%Y-%m-%d')}",
    "projeto": "",
    "empresa": "",
    "servico": "",
    "fazenda": "",
    "talhao": "",
    "area_realizada": 0,
    "area_total": 0,
    "valor_ganho": 0,
    "diaria_colaborador": 0,
    "observacoes": ""
  }},
  "premios": [
    {{
      "categoria": "RATEIO_MANUAL",
      "colaborador_id": "c√≥digo extra√≠do",
      "equipamento": null,
      "producao": 0,
      "funcao": "CAMPO",
      "recebe_premio": 1,
      "valor_fixo": null
    }}
  ]
}}"""

        print(f"[OPENAI] Enviando requisi√ß√£o para GPT-3.5-turbo...")
        
        print(f"[OPENAI] üì§ Enviando requisi√ß√£o para GPT-3.5-turbo...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente especializado em extra√ß√£o de dados agr√≠colas. Responda APENAS com JSON v√°lido."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.1,
            timeout=30  # Timeout de 30 segundos
        )
        
        print(f"[OPENAI] ‚úÖ Resposta recebida com sucesso")
        
        conteudo = response.choices[0].message.content.strip()
        print(f"[OPENAI] Processando resposta: {len(conteudo)} caracteres")
        print(f"[OPENAI] Primeiros 300 chars da resposta: {conteudo[:300]}")
        
        # Limpar poss√≠veis marcadores de c√≥digo
        if conteudo.startswith('```json'):
            conteudo = conteudo[7:]
        if conteudo.startswith('```'):
            conteudo = conteudo[3:]
        if conteudo.endswith('```'):
            conteudo = conteudo[:-3]
        
        print(f"[OPENAI] Fazendo parse do JSON...")
        dados = json.loads(conteudo.strip())
        print(f"[OPENAI] ‚úÖ JSON parseado com sucesso!")
        print(f"[OPENAI] Estrutura: boletim={bool(dados.get('boletim'))}, premios={len(dados.get('premios', []))}")
        
        return dados
        
    except Exception as e:
        print(f"[OPENAI] ‚ùå ERRO: {str(e)}")
        import traceback
        traceback.print_exc()
        return None
        
        prompt = f"""
Voc√™ √© um especialista em extrair dados de pr√©-apontamentos de campo. Analise o texto abaixo e extraia as informa√ß√µes seguindo EXATAMENTE a estrutura JSON solicitada.

REGRAS IMPORTANTES:
1. DATA: Se "HOJE", use a data atual no formato YYYY-MM-DD
2. VALORES: Remover "R$", pontos de milhares, v√≠rgula decimal vira ponto (ex: "R$ 18.004,43" = 18004.43)
3. LOTES/INSUMOS: Extrair TODOS os insumos encontrados (lote1+insumo1+quantidade1, lote2+insumo2+quantidade2, etc)
   - Buscar padr√µes: "LOTE:", "INSUMO:", "QUANTIDADE:", "PRODUTO:", "DEFENSIVO:"
   - Exemplos: "LOTE ABC123", "INSUMO HERBICIDA", "QUANTIDADE 2,5L"
4. √ÅREA RESTANTE: Calcular AREA_TOTAL - AREA_REALIZADA, ou extrair se informado explicitamente
5. STATUS CAMPO: Extrair informa√ß√µes sobre condi√ß√µes/status do campo 
   - Buscar: "STATUS:", "SITUA√á√ÉO:", "CONDI√á√ÉO:", palavras como "CONCLU√çDO", "PARCIAL", "INICIADO", "PENDENTE"
6. RATEIO: Extrair colaborador_id e equipamento_id dos c√≥digos
7. RECEBE_PREMIO: 1 se tem "PREMIO", 0 se vazio
8. AREAS: Converter v√≠rgula para ponto decimal
9. RATEIO AUTOM√ÅTICO: Se produ√ß√£o estiver em branco ou zero, dividir √°rea realizada igualmente
10. VALIDA√á√ÉO: Verificar se todos os colaboradores t√™m produ√ß√£o preenchida

CORRE√á√ïES AUTOM√ÅTICAS OBRIGAT√ìRIAS:
- "larzil" ou "larsil" ‚Üí "LARSIL"
- "furmiga" ou "formiga" ‚Üí "FORMIGA"
- "combate furmiga" ‚Üí "COMBATE FORMIGA"
- "COMBATE furmiga" ‚Üí "COMBATE FORMIGA"
- Sempre MAI√öSCULO para: EMPRESA, SERVI√áO, FAZENDA
- Manter c√≥digos de colaborador/equipamento como est√£o
- IMPORTANTE: Manter formato "CAMPO: VALOR" (ex: "TALH√ÉO: 001" n√£o "TALH√ÉO001")

ESTRUTURA JSON ESPERADA:
{{
    "boletim": {{
        "data_execucao": "YYYY-MM-DD",
        "projeto": "n√∫mero",
        "empresa": "texto CORRIGIDO E MAI√öSCULO",
        "servico": "texto CORRIGIDO E MAI√öSCULO", 
        "fazenda": "texto MAI√öSCULO",
        "talhao": "texto",
        "area_total": float,
        "area_realizada": float,
        "area_restante": float,
        "status_campo": "texto",
        "valor_ganho": float ou null,
        "diaria_colaborador": float ou null,
        "lote1": "texto ou null",
        "insumo1": "texto ou null", 
        "quantidade1": float ou null,
        "lote2": "texto ou null",
        "insumo2": "texto ou null",
        "quantidade2": float ou null,
        "lote3": "texto ou null",
        "insumo3": "texto ou null",
        "quantidade3": float ou null,
        "divisao_premio_igual": "SIM ou NAO",
        "observacoes": "texto ou null"
    }},
    "premios": [
        {{
            "categoria": "RATEIO_MANUAL",
            "colaborador_id": "c√≥digo",
            "equipamento": null,
            "producao": float,
            "funcao": "extra√≠do do contexto",
            "recebe_premio": 0 ou 1,
            "valor_fixo": null
        }},
        {{
            "categoria": "RATEIO_MEC", 
            "colaborador_id": "c√≥digo",
            "equipamento": "c√≥digo equipamento",
            "producao": float,
            "funcao": "OPERADOR",
            "recebe_premio": 0 ou 1,
            "valor_fixo": null
        }},
        {{
            "categoria": "APOIO",
            "colaborador_id": "c√≥digo",
            "equipamento": null,
            "producao": null,
            "funcao": "fun√ß√£o extra√≠da",
            "recebe_premio": 0 ou 1,
            "valor_fixo": null
        }},
        {{
            "categoria": "ESTRUTURA",
            "colaborador_id": "c√≥digo", 
            "equipamento": "c√≥digo equipamento",
            "producao": null,
            "funcao": "fun√ß√£o extra√≠da",
            "recebe_premio": 0 ou 1,
            "valor_fixo": null
        }}
    ]
}}

TEXTO PARA AN√ÅLISE:
{texto}

Responda APENAS com o JSON v√°lido, sem explica√ß√µes adicionais.
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um extrator de dados especializado em pr√©-apontamentos de campo. Retorne apenas JSON v√°lido."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.1
        )
        
        resposta = response.choices[0].message.content.strip()
        
        # Tentar extrair JSON da resposta
        try:
            dados_extraidos = json.loads(resposta)
            return dados_extraidos
        except json.JSONDecodeError:
            # Se n√£o for JSON v√°lido, tentar extrair JSON de dentro do texto
            import re
            json_match = re.search(r'\{.*\}', resposta, re.DOTALL)
            if json_match:
                dados_extraidos = json.loads(json_match.group())
                return dados_extraidos
            else:
                raise Exception("Resposta da OpenAI n√£o cont√©m JSON v√°lido")
                
    except Exception as e:
        print(f"[ERRO] Falha na extra√ß√£o OpenAI: {e}")
        return None

def verificar_rateio_e_aplicar_logica(texto, dados_extraidos):
    """
    Verifica rateios e aplica l√≥gica autom√°tica:
    1. Rateio autom√°tico se valores em branco
    2. Detec√ß√£o de inconsist√™ncias
    3. Alertas para corre√ß√£o
    """
    try:
        alertas = []
        import copy
        dados_corrigidos = copy.deepcopy(dados_extraidos)  # C√≥pia profunda para modificar arrays aninhados
        
        print(f"[RATEIO] üìä Dados originais - Pr√™mios: {len(dados_extraidos.get('premios', []))}")
        print(f"[RATEIO] üìä Dados copiados - Pr√™mios: {len(dados_corrigidos.get('premios', []))}")
        
        # Extrair √°rea realizada para c√°lculos
        area_realizada = dados_extraidos.get('boletim', {}).get('area_realizada', 0)
        
        # Analisar RATEIO MANUAL
        rateios_manuais = [p for p in dados_extraidos.get('premios', []) if p.get('categoria') == 'RATEIO_MANUAL']
        
        if rateios_manuais:
            print(f"[RATEIO] Encontrados {len(rateios_manuais)} colaboradores no rateio manual")
            
            # Verificar se tem produ√ß√£o preenchida
            com_producao = [r for r in rateios_manuais if r.get('producao') and r.get('producao') > 0]
            sem_producao = [r for r in rateios_manuais if not r.get('producao') or r.get('producao') <= 0]
            
            total_colaboradores = len(rateios_manuais)
            total_com_producao = len(com_producao)
            total_sem_producao = len(sem_producao)
            
            print(f"[RATEIO] Com produ√ß√£o: {total_com_producao}, Sem produ√ß√£o: {total_sem_producao}")
            
            # CASO 1: Todos em branco - RATEIO AUTOM√ÅTICO
            if total_sem_producao == total_colaboradores:
                print(f"[RATEIO] ‚úÖ APLICANDO RATEIO AUTOM√ÅTICO - Dividindo {area_realizada} por {total_colaboradores}")
                producao_automatica = round(area_realizada / total_colaboradores, 2) if total_colaboradores > 0 else 0
                
                # Aplicar rateio autom√°tico
                aplicados = 0
                for i, premio in enumerate(dados_corrigidos.get('premios', [])):
                    if premio.get('categoria') == 'RATEIO_MANUAL':
                        premio['producao'] = producao_automatica
                        aplicados += 1
                        print(f"[RATEIO] ‚úÖ Aplicado {producao_automatica} para {premio.get('colaborador_id')}")
                
                print(f"[RATEIO] üìä Total aplica√ß√µes: {aplicados}")
                alertas.append(f"‚úÖ RATEIO AUTOM√ÅTICO aplicado: {producao_automatica} por colaborador")
            
            # CASO 2: Parcialmente preenchido - INCONSIST√äNCIA
            elif 0 < total_com_producao < total_colaboradores:
                total_preenchido = sum(r.get('producao', 0) for r in com_producao)
                restante = area_realizada - total_preenchido
                
                print(f"[RATEIO] ‚ö†Ô∏è INCONSIST√äNCIA DETECTADA - {total_com_producao} de {total_colaboradores} preenchidos")
                print(f"[RATEIO] Total preenchido: {total_preenchido}, Restante: {restante}")
                
                alertas.append(f"‚ö†Ô∏è RATEIO INCOMPLETO: {total_com_producao} de {total_colaboradores} colaboradores preenchidos")
                alertas.append(f"üìä √Årea preenchida: {total_preenchido}, √Årea restante: {restante}")
                
                if restante > 0:
                    alertas.append(f"üîß A√á√ÉO NECESS√ÅRIA: Defina produ√ß√£o para os {total_sem_producao} colaboradores restantes")
                    # Listar colaboradores sem produ√ß√£o
                    colaboradores_pendentes = [r.get('colaborador_id') for r in sem_producao]
                    alertas.append(f"üë• Colaboradores pendentes: {', '.join(colaboradores_pendentes)}")
                else:
                    alertas.append("‚úÖ √Årea totalmente distribu√≠da")
            
            # CASO 3: Todos preenchidos - VERIFICAR SOMA
            elif total_sem_producao == 0:
                total_distribuido = sum(r.get('producao', 0) for r in rateios_manuais)
                diferenca = abs(total_distribuido - area_realizada)
                
                print(f"[RATEIO] ‚úÖ Todos preenchidos - Total: {total_distribuido}, √Årea: {area_realizada}")
                
                if diferenca > 0.1:  # Toler√¢ncia de 0.1
                    alertas.append(f"‚ö†Ô∏è DIVERG√äNCIA: Total rateio ({total_distribuido}) ‚â† √Årea realizada ({area_realizada})")
                    alertas.append(f"üîß Diferen√ßa de {diferenca} - Verifique os valores")
                else:
                    alertas.append("‚úÖ Rateio manual conferido - Valores corretos")
        
        # Analisar RATEIO MECANIZADO
        rateios_mec = [p for p in dados_extraidos.get('premios', []) if p.get('categoria') == 'RATEIO_MEC']
        
        if rateios_mec:
            print(f"[RATEIO MEC] Encontrados {len(rateios_mec)} equipamentos")
            
            # Verificar se h√° "PRODU√á√ÉO MECANIZADA TOTAL" no texto
            if "PRODU√á√ÉO MECANIZADA TOTAL:" in texto:
                import re
                match = re.search(r'PRODU√á√ÉO MECANIZADA TOTAL:\s*(\d+(?:,\d+)?)', texto)
                if match:
                    total_declarado = float(match.group(1).replace(',', '.'))
                    total_rateado = sum(r.get('producao', 0) for r in rateios_mec if r.get('producao'))
                    
                    print(f"[RATEIO MEC] Total declarado: {total_declarado}, Total rateado: {total_rateado}")
                    
                    if abs(total_declarado - total_rateado) > 0.1:
                        diferenca = total_declarado - total_rateado
                        alertas.append(f"‚ö†Ô∏è RATEIO MECANIZADO: Faltam {diferenca} para atingir total de {total_declarado}")
        
        return dados_corrigidos, alertas
        
    except Exception as e:
        print(f"[ERRO] Falha na verifica√ß√£o de rateio: {e}")
        return dados_extraidos, [f"‚ùå Erro na verifica√ß√£o de rateio: {str(e)[:100]}"]

def salvar_boletim_staging(dados_boletim, raw_id):
    """Salva os dados do boletim na tabela BOLETIM_STAGING"""
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Converter "HOJE" ou formatos problem√°ticos para data atual
        data_execucao = dados_boletim.get('data_execucao')
        if data_execucao:
            if data_execucao.upper() == 'HOJE' or data_execucao == 'YYYY-MM-DD':
                data_execucao = datetime.now().strftime('%Y-%m-%d')
                print(f"[SQL] Data convertida: {dados_boletim.get('data_execucao')} -> {data_execucao}")
        else:
            data_execucao = datetime.now().strftime('%Y-%m-%d')
            print(f"[SQL] Data ausente, usando hoje: {data_execucao}")
        
        print(f"[SQL] üíæ Salvando boletim com RAW_ID: {raw_id}")
        print(f"[SQL] Data final: {data_execucao}")
        
        query = """
        INSERT INTO BOLETIM_STAGING (
            RAW_ID, DATA_EXECUCAO, PROJETO, EMPRESA, SERVICO, FAZENDA, TALHAO,
            AREA_TOTAL, AREA_REALIZADA, AREA_RESTANTE, STATUS_CAMPO, VALOR_GANHO,
            DIARIA_COLABORADOR, LOTE1, INSUMO1, QUANTIDADE1, LOTE2, INSUMO2, 
            QUANTIDADE2, LOTE3, INSUMO3, QUANTIDADE3, DIVISAO_PREMIO_IGUAL,
            OBSERVACOES, CREATED_AT
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        cursor.execute(query, (
            raw_id,
            data_execucao,  # Usando a data convertida
            dados_boletim.get('projeto'),
            dados_boletim.get('empresa'),
            dados_boletim.get('servico'),
            dados_boletim.get('fazenda'),
            dados_boletim.get('talhao'),
            dados_boletim.get('area_total'),
            dados_boletim.get('area_realizada'),
            dados_boletim.get('area_restante'),
            dados_boletim.get('status_campo'),
            dados_boletim.get('valor_ganho'),
            dados_boletim.get('diaria_colaborador'),
            dados_boletim.get('lote1'),
            dados_boletim.get('insumo1'),
            dados_boletim.get('quantidade1'),
            dados_boletim.get('lote2'),
            dados_boletim.get('insumo2'),
            dados_boletim.get('quantidade2'),
            dados_boletim.get('lote3'),
            dados_boletim.get('insumo3'),
            dados_boletim.get('quantidade3'),
            dados_boletim.get('divisao_premio_igual'),
            dados_boletim.get('observacoes'),
            obter_data_brasilia()  # Data/hora de Bras√≠lia
        ))
        
        conn.commit()
        print(f"[SQL] ‚úÖ Boletim salvo na STAGING com sucesso!")
        conn.close()
        return True
        
    except Exception as e:
        print(f"[ERRO] Falha ao salvar boletim: {e}")
        import traceback
        traceback.print_exc()
        return False

def salvar_premios_staging(premios_list, raw_id):
    """Salva os pr√™mios na tabela PREMIO_STAGING"""
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        query = """
        INSERT INTO PREMIO_STAGING (
            RAW_ID, CATEGORIA, COLABORADOR_ID, EQUIPAMENTO, PRODUCAO, FUNCAO,
            RECEBE_PREMIO, VALOR_FIXO, CREATED_AT
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        for premio in premios_list:
            data_brasilia = obter_data_brasilia()
            cursor.execute(query, (
                raw_id,
                premio.get('categoria'),
                premio.get('colaborador_id'),
                premio.get('equipamento'),
                premio.get('producao'),
                premio.get('funcao'),
                premio.get('recebe_premio'),
                premio.get('valor_fixo'),
                data_brasilia
            ))
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"[ERRO] Falha ao salvar pr√™mios: {e}")
        return False

def buscar_coordenador(projeto):
    """Busca o telefone do coordenador do projeto"""
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        query = """
        SELECT TELEFONE FROM USUARIOS 
        WHERE PROJETO = ? AND PERFIL = 'COORDENADOR'
        """
        
        cursor.execute(query, (projeto,))
        resultado = cursor.fetchone()
        conn.close()
        
        if resultado:
            return resultado[0]
        return None
        
    except Exception as e:
        print(f"[ERRO] Falha ao buscar coordenador: {e}")
        return None

def enviar_notificacao_coordenador_texto(telefone_coord, dados_resumo, raw_id, telefone_remetente=None):
    """Envia notifica√ß√£o para o coordenador usando TEXTO SIMPLES (SIM/NAO/CORRIGIR)"""
    try:
        print(f"[NOTIF] üöÄ Iniciando envio de notifica√ß√£o TEXTO para coordenador")
        print(f"[NOTIF] üìû Telefone coordenador: {telefone_coord}")
        print(f"[NOTIF] üî¢ RAW_ID: {raw_id}")
        print(f"[NOTIF] üì± Telefone remetente: {telefone_remetente}")
        
        import requests
        
        if not all([INSTANCE_ID, TOKEN, telefone_coord]):
            print(f"[NOTIF] ‚ùå Dados Z-API incompletos!")
            return False

        # Buscar nome do remetente
        nome_remetente = "Usu√°rio"
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            query = "SELECT USUARIO FROM USUARIOS WHERE TELEFONE = ?"
            cursor.execute(query, (telefone_remetente,))
            resultado = cursor.fetchone()
            if resultado:
                nome_remetente = resultado[0]
            conn.close()
        except:
            pass

        # Formatar valores
        valor_ganho = dados_resumo.get('valor_ganho')
        valor_ganho_str = f"R$ {valor_ganho:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") if valor_ganho else "N/A"
        
        diaria_colaborador = dados_resumo.get('diaria_colaborador')
        diaria_str = f"R$ {diaria_colaborador:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") if diaria_colaborador else "N/A"
        
        # Formatar data
        data_execucao = dados_resumo.get('data_execucao', '')
        if data_execucao:
            try:
                data_obj = datetime.strptime(data_execucao, '%Y-%m-%d')
                data_formatada = data_obj.strftime('%d/%m/%Y')
            except:
                data_formatada = data_execucao
        else:
            data_formatada = datetime.now().strftime('%d/%m/%Y')

        telefone_formatado = telefone_remetente[-4:] if telefone_remetente else "****"

        mensagem = f"""üö® *NOVO PR√â-APONTAMENTO #{raw_id}*
üë§ *Enviado por:* {nome_remetente} (...{telefone_formatado})
üèóÔ∏è *Projeto:* {dados_resumo.get('projeto', 'N/A')} - {dados_resumo.get('empresa', 'N/A')}
üìÖ *Data:* {data_formatada}
üå± *Servi√ßo:* {dados_resumo.get('servico', 'N/A')}
üìç *Fazenda:* {dados_resumo.get('fazenda', 'N/A')} - Talh√£o {dados_resumo.get('talhao', 'N/A')}
üìè *√Årea:* {dados_resumo.get('area_realizada', 0)}/{dados_resumo.get('area_total', 0)} ha
üí∞ *Valor ganho:* {valor_ganho_str}
üë∑ *Di√°ria colaborador:* {diaria_str}

*OBS:* {dados_resumo.get('observacoes', 'Sem observa√ß√µes')}

‚ö° *RESPONDA COM:*
‚Ä¢ *SIM {raw_id}* - Para APROVAR
‚Ä¢ *NAO {raw_id}* - Para REJEITAR  
‚Ä¢ *CORRIGIR {raw_id}* - Para solicitar corre√ß√£o

_Exemplo: SIM {raw_id}_"""

        # Enviar via Z-API texto simples
        url_send = f"https://api.z-api.io/instances/{INSTANCE_ID}/token/{TOKEN}/send-text"
        
        payload = {
            "phone": telefone_coord,
            "message": mensagem
        }
        
        headers = {
            "Content-Type": "application/json",
            "Client-Token": CLIENT_TOKEN
        }
        
        print(f"[NOTIF] üì° Enviando notifica√ß√£o TEXTO...")
        response = requests.post(url_send, json=payload, headers=headers)
        
        print(f"[NOTIF] üìä Status: {response.status_code}")
        print(f"[NOTIF] üìÑ Resposta: {response.text[:200]}")
        
        sucesso = response.status_code == 200
        if sucesso:
            print(f"[NOTIF] ‚úÖ Notifica√ß√£o TEXTO enviada com sucesso!")
        else:
            print(f"[NOTIF] ‚ùå Falha no envio da notifica√ß√£o TEXTO!")
            
        return sucesso
        
    except Exception as e:
        print(f"[NOTIF] ‚ùå ERRO CR√çTICO no envio: {e}")
        import traceback
        traceback.print_exc()
        return False

def enviar_notificacao_coordenador(telefone_coord, dados_resumo, raw_id, telefone_remetente=None):
    """VERS√ÉO ATUALIZADA: Envia notifica√ß√£o usando TEXTO ao inv√©s de bot√µes"""
    return enviar_notificacao_coordenador_texto(telefone_coord, dados_resumo, raw_id, telefone_remetente)
    """Envia notifica√ß√£o para o coordenador com bot√µes de aprova√ß√£o"""
    try:
        import requests
        
        if not all([INSTANCE_ID, TOKEN, telefone_coord]):
            return False
        
        # Buscar nome do remetente se poss√≠vel
        nome_remetente = "Usu√°rio"
        try:
            conn = conectar_db()
            cursor = conn.cursor()
            query = "SELECT USUARIO FROM USUARIOS WHERE TELEFONE = ?"
            cursor.execute(query, (telefone_remetente,))
            resultado = cursor.fetchone()
            if resultado:
                nome_remetente = resultado[0]
            conn.close()
        except:
            pass
        
        # Formatar valores monet√°rios
        valor_ganho = dados_resumo.get('valor_ganho')
        valor_ganho_str = f"R$ {valor_ganho:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") if valor_ganho else "N/A"
        
        diaria_colaborador = dados_resumo.get('diaria_colaborador')
        diaria_str = f"R$ {diaria_colaborador:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") if diaria_colaborador else "N/A"
        
        # Formatar data
        data_execucao = dados_resumo.get('data_execucao', '')
        if data_execucao:
            try:
                from datetime import datetime
                data_obj = datetime.strptime(data_execucao, '%Y-%m-%d')
                data_formatada = data_obj.strftime('%d/%m/%Y')
            except:
                data_formatada = data_execucao
        else:
            data_formatada = datetime.now().strftime('%d/%m/%Y')
        
        # Telefone formatado
        telefone_formatado = telefone_remetente[-4:] if telefone_remetente else "****"
        
        mensagem = f"""ÔøΩ *NOVO PR√â-APONTAMENTO #{raw_id}*
üë§ *Enviado por:* {nome_remetente} (...{telefone_formatado})
üèóÔ∏è *Projeto:* {dados_resumo.get('projeto', 'N/A')} - {dados_resumo.get('empresa', 'N/A')}
ÔøΩ *Data:* {data_formatada}
üå± *Servi√ßo:* {dados_resumo.get('servico', 'N/A')}
üìç *Fazenda:* {dados_resumo.get('fazenda', 'N/A')} - Talh√£o {dados_resumo.get('talhao', 'N/A')}
ÔøΩ *√Årea:* {dados_resumo.get('area_realizada', 0)}/{dados_resumo.get('area_total', 0)} ha
üí∞ *Valor ganho:* {valor_ganho_str}
ÔøΩ *Di√°ria colaborador:* {diaria_str}

*OBS:* {dados_resumo.get('observacoes', 'Sem observa√ß√µes')}"""

        # Enviar mensagem com bot√µes
        url_send = f"https://api.z-api.io/instances/{INSTANCE_ID}/token/{TOKEN}/send-button-list"
        
        payload = {
            "phone": telefone_coord,
            "message": mensagem,
            "buttonList": {
                "buttons": [
                    {
                        "id": f"aprovar_{raw_id}",
                        "label": "‚úÖ APROVAR"
                    },
                    {
                        "id": f"rejeitar_{raw_id}",
                        "label": "‚ùå REJEITAR"
                    },
                    {
                        "id": f"corrigir_{raw_id}",
                        "label": "ÔøΩ SOLICITAR CORRE√á√ÉO"
                    }
                ]
            }
        }
        
        headers = {
            "Content-Type": "application/json",
            "Client-Token": CLIENT_TOKEN
        }
        
        response = requests.post(url_send, json=payload, headers=headers)
        return response.status_code == 200
        
    except Exception as e:
        print(f"[ERRO] Falha ao enviar notifica√ß√£o: {e}")
        return False

def processar_pre_apontamento(numero, texto):
    """
    Fun√ß√£o principal para processar pr√©-apontamentos
    
    Args:
        numero: Telefone do usu√°rio
        texto: Conte√∫do da mensagem
        
    Returns:
        {
            'is_pre_apont': bool,
            'status': 'ok|alerta|erro', 
            'resposta': 'mensagem'
        }
    """
    try:
        # 1. Detectar se √© pr√©-apontamento
        if not detectar_pre_apontamento(texto):
            return {
                'is_pre_apont': False,
                'status': 'ok',
                'resposta': ''
            }
        
        print(f"[PRE-APONT] Detectado pr√©-apontamento de {numero}")
        
        # 2. Gerar hash e verificar duplica√ß√£o
        hash_msg = gerar_hash_mensagem(texto, numero)
        
        # 3. Salvar RAW imediatamente
        raw_id = salvar_raw(numero, texto, hash_msg)
        if not raw_id:
            return {
                'is_pre_apont': True,
                'status': 'erro',
                'resposta': '‚ùå Erro ao salvar pr√©-apontamento. Tente novamente.'
            }
        
        print(f"[PRE-APONT] RAW salvo com ID: {raw_id}")
        
        # 4. Extrair dados com OpenAI
        print(f"[PRE-APONT] Iniciando extra√ß√£o OpenAI...")
        print(f"[PRE-APONT] Verificando API Key: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'NONE'}...")
        print(f"[PRE-APONT] Cliente configurado: {'SIM' if client else 'N√ÉO'}")
        print(f"[PRE-APONT] Texto para processar (primeiros 200 chars): {texto[:200]}...")
        
        dados_extraidos = extrair_dados_com_openai(texto)
        print(f"[PRE-APONT] Resultado OpenAI: {type(dados_extraidos)} - {str(dados_extraidos)[:200] if dados_extraidos else 'NONE'}")
        
        if not dados_extraidos:
            print(f"[PRE-APONT] ERRO: Falha na extra√ß√£o OpenAI - dados_extraidos √© None/False")
            return {
                'is_pre_apont': True,
                'status': 'alerta',
                'resposta': '‚ö†Ô∏è Falha na an√°lise do texto. Dados salvos para revis√£o manual.'
            }
        
        print(f"[PRE-APONT] Dados extra√≠dos com sucesso")
        
        # 4.1. Verificar rateio e aplicar l√≥gicas autom√°ticas
        dados_corrigidos, alertas_rateio = verificar_rateio_e_aplicar_logica(texto, dados_extraidos)
        print(f"[PRE-APONT] Verifica√ß√£o de rateio conclu√≠da - {len(alertas_rateio)} alertas")
        
        # 5. Salvar BOLETIM_STAGING
        if not salvar_boletim_staging(dados_corrigidos.get('boletim', {}), raw_id):
            return {
                'is_pre_apont': True,
                'status': 'alerta',
                'resposta': '‚ö†Ô∏è Pr√©-apontamento recebido, mas houve erro ao estruturar os dados. Ser√° verificado manualmente.'
            }
        
        # 6. Salvar PREMIO_STAGING
        premios = dados_corrigidos.get('premios', [])
        print(f"[PRE-APONT] üèÜ Total pr√™mios para salvar: {len(premios)}")
        
        # Debug: mostrar os primeiros 3 pr√™mios
        for i, premio in enumerate(premios[:3]):
            print(f"[PRE-APONT] üèÜ Pr√™mio {i+1}: {premio.get('categoria')} | Colaborador: {premio.get('colaborador_id')} | Produ√ß√£o: {premio.get('producao')}")
        
        if premios and not salvar_premios_staging(premios, raw_id):
            return {
                'is_pre_apont': True,
                'status': 'alerta',
                'resposta': '‚ö†Ô∏è Dados principais salvos, mas houve erro nos pr√™mios. Ser√° verificado manualmente.'
            }
        
        print(f"[PRE-APONT] Dados estruturados salvos")
        
        # 7. Buscar coordenador e enviar notifica√ß√£o
        projeto = dados_corrigidos.get('boletim', {}).get('projeto')
        if projeto:
            telefone_coord = buscar_coordenador(projeto)
            if telefone_coord:
                sucesso_notif = enviar_notificacao_coordenador(
                    telefone_coord, 
                    dados_corrigidos.get('boletim', {}), 
                    raw_id,
                    numero
                )
                if not sucesso_notif:
                    print(f"[PRE-APONT] Falha ao notificar coordenador")
            else:
                print(f"[PRE-APONT] Coordenador n√£o encontrado para projeto {projeto}")
        
        # 8. Resposta de sucesso com alertas de rateio
        dados_boletim = dados_corrigidos.get('boletim', {})
        
        # Montar resposta base
        resposta_base = f"""‚úÖ *PR√â-APONTAMENTO RECEBIDO*

üìä *PROJETO:* {dados_boletim.get('projeto', 'N/A')}
üè≠ *EMPRESA:* {dados_boletim.get('empresa', 'N/A')}
üîß *SERVI√áO:* {dados_boletim.get('servico', 'N/A')}
üåæ *FAZENDA:* {dados_boletim.get('fazenda', 'N/A')}
üìç *TALH√ÉO:* {dados_boletim.get('talhao', 'N/A')}
üìÖ *DATA:* {formatar_data_amigavel(dados_boletim.get('data_execucao', 'N/A'))}

üìè *√ÅREA REALIZADA:* {dados_boletim.get('area_realizada', 0)}
üìê *√ÅREA TOTAL:* {dados_boletim.get('area_total', 0)}

üîÑ *STATUS:* Enviado para aprova√ß√£o
üìã *ID:* {raw_id}"""

        # Adicionar alertas de rateio se houver
        if alertas_rateio:
            resposta_base += "\n\nüéØ *AN√ÅLISE DE RATEIO:*"
            for alerta in alertas_rateio:
                resposta_base += f"\n{alerta}"
        
        # Verificar se h√° alertas cr√≠ticos (inconsist√™ncias)
        alertas_criticos = [a for a in alertas_rateio if "INCOMPLETO" in a or "DIVERG√äNCIA" in a or "A√á√ÉO NECESS√ÅRIA" in a]
        
        if alertas_criticos:
            resposta_base += "\n\n‚ö†Ô∏è *REQUER ATEN√á√ÉO* - Verifique os alertas acima"
            status_final = 'alerta'
        else:
            resposta_base += "\n\n‚úÖ Coordenador ser√° notificado para aprova√ß√£o."
            status_final = 'ok'
        
        return {
            'is_pre_apont': True,
            'status': status_final,
            'resposta': resposta_base
        }
        
    except Exception as e:
        print(f"[ERRO] Falha no processamento do pr√©-apontamento: {e}")
        return {
            'is_pre_apont': True,
            'status': 'erro',
            'resposta': f'‚ùå Erro interno no processamento do pr√©-apontamento: {str(e)[:100]}'
        }

# Fun√ß√£o auxiliar para atualizar data "HOJE"
def processar_data_hoje():
    """Retorna a data atual no formato YYYY-MM-DD"""
    return datetime.now().strftime('%Y-%m-%d')

if __name__ == "__main__":
    # Teste b√°sico
    texto_teste = """DATA: HOJE
PROJETO: 830
EMPRESA: LARSIL
SERVI√áO: COMBATE FORMIGA
FAZENDA: S√ÉO JO√ÉO
TALH√ÉO: 001
AREA TOTAL: 50
AREA REALIZADA: 10
-------------
TESTE B√ÅSICO
"""
    
    resultado = processar_pre_apontamento("5511999999999", texto_teste)
    print(f"Teste: {resultado}")

def detectar_resposta_coordenador(texto, telefone_coordenador):
    """
    Detecta se a mensagem √© uma resposta de aprova√ß√£o do coordenador
    Formatos aceitos: SIM 48, NAO 48, CORRIGIR 48
    """
    try:
        print(f"[COORD-RESP] ========== DETECTANDO RESPOSTA ==========")
        print(f"[COORD-RESP] üìù Texto original: '{texto}'")
        print(f"[COORD-RESP] üìû Telefone coordenador: {telefone_coordenador}")
        
        # Normalizar texto
        texto_limpo = texto.upper().strip()
        palavras = texto_limpo.split()
        
        print(f"[COORD-RESP] üîÑ Texto normalizado: '{texto_limpo}'")
        print(f"[COORD-RESP] ÔøΩ Palavras detectadas: {palavras}")
        print(f"[COORD-RESP] üî¢ N√∫mero de palavras: {len(palavras)}")
        
        # Verificar padr√µes: ACAO + NUMERO
        if len(palavras) >= 2:
            acao = palavras[0]
            print(f"[COORD-RESP] üéØ A√ß√£o detectada: '{acao}'")
            
            # Tentar extrair n√∫mero (pode ser qualquer palavra que contenha d√≠gitos)
            raw_id = None
            for i, palavra in enumerate(palavras[1:], 1):
                print(f"[COORD-RESP] üîç Analisando palavra {i}: '{palavra}'")
                if palavra.isdigit():
                    raw_id = palavra
                    print(f"[COORD-RESP] ‚úÖ RAW_ID encontrado (isdigit): {raw_id}")
                    break
                # Tamb√©m aceitar n√∫meros dentro de texto (ex: "SIM48", "NAO48")
                import re
                numeros = re.findall(r'\d+', palavra)
                if numeros:
                    raw_id = numeros[0]
                    print(f"[COORD-RESP] ‚úÖ RAW_ID encontrado (regex): {raw_id}")
                    break
            
            print(f"[COORD-RESP] üìä A√ß√£o final: '{acao}', RAW_ID final: '{raw_id}'")
            print(f"[COORD-RESP] üîç A√ß√£o v√°lida? {acao in ['SIM', 'NAO', 'CORRIGIR']}")
            print(f"[COORD-RESP] üîç RAW_ID v√°lido? {raw_id is not None}")
            
            if raw_id and acao in ['SIM', 'NAO', 'CORRIGIR']:
                print(f"[COORD-RESP] ‚úÖ RESPOSTA V√ÅLIDA DETECTADA: {acao} para RAW_ID {raw_id}")
                
                # Verificar se o coordenador tem permiss√£o para este RAW_ID
                print(f"[COORD-RESP] üîí Verificando permiss√£o do coordenador...")
                tem_permissao = verificar_permissao_coordenador(telefone_coordenador, raw_id)
                print(f"[COORD-RESP] üîí Permiss√£o resultado: {tem_permissao}")
                
                if tem_permissao:
                    
                    # Converter para formato de button_id para compatibilidade
                    button_id_map = {
                        'SIM': f'aprovar_{raw_id}',
                        'NAO': f'rejeitar_{raw_id}',
                        'CORRIGIR': f'corrigir_{raw_id}'
                    }
                    
                    button_id = button_id_map[acao]
                    print(f"[COORD-RESP] üéØ Button ID gerado: {button_id}")
                    
                    resultado = {
                        'is_resposta_coord': True,
                        'button_id': button_id,
                        'acao': acao,
                        'raw_id': raw_id
                    }
                    print(f"[COORD-RESP] ‚úÖ RESULTADO FINAL: {resultado}")
                    return resultado
                else:
                    print(f"[COORD-RESP] ‚ùå Coordenador sem permiss√£o para RAW_ID {raw_id}")
                    return {
                        'is_resposta_coord': False,
                        'erro': 'Sem permiss√£o para este apontamento'
                    }
            else:
                print(f"[COORD-RESP] ‚ùå FORMATO INV√ÅLIDO")
                print(f"[COORD-RESP] - A√ß√£o '{acao}' v√°lida: {acao in ['SIM', 'NAO', 'CORRIGIR']}")
                print(f"[COORD-RESP] - RAW_ID '{raw_id}' v√°lido: {raw_id is not None}")
        else:
            print(f"[COORD-RESP] ‚ùå POUCAS PALAVRAS: {len(palavras)} (m√≠nimo 2)")
        
        print(f"[COORD-RESP] ‚û°Ô∏è N√ÉO √â RESPOSTA DE COORDENADOR")
        return {'is_resposta_coord': False}
        
    except Exception as e:
        print(f"[COORD-RESP] ‚ùå ERRO CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        return {'is_resposta_coord': False, 'erro': str(e)}

def normalizar_telefone(telefone):
    """
    Normaliza telefone removendo espa√ßos, h√≠fens e caracteres especiais
    """
    if not telefone:
        return ""
    # Remove todos os caracteres n√£o num√©ricos
    telefone_limpo = ''.join(filter(str.isdigit, str(telefone)))
    print(f"[NORM] üìû '{telefone}' ‚Üí '{telefone_limpo}'")
    return telefone_limpo

def verificar_permissao_coordenador(telefone_coordenador, raw_id):
    """Verifica se o coordenador tem permiss√£o para aprovar este RAW_ID"""
    try:
        print(f"[PERM] ========== VERIFICANDO PERMISS√ÉO ==========")
        print(f"[PERM] üìû Telefone coordenador original: {telefone_coordenador}")
        
        # Normalizar telefone do coordenador
        telefone_normalizado = normalizar_telefone(telefone_coordenador)
        print(f"[PERM] ÔøΩ Telefone coordenador normalizado: {telefone_normalizado}")
        print(f"[PERM] ÔøΩüî¢ RAW_ID: {raw_id}")
        
        conn = conectar_db()
        cursor = conn.cursor()
        
        # Buscar projeto do RAW_ID
        query_raw = "SELECT CONTEUDO_BRUTO FROM PRE_APONTAMENTO_RAW WHERE ID = ?"
        print(f"[PERM] üìù Query RAW: {query_raw}")
        print(f"[PERM] üìù Par√¢metro: {raw_id}")
        
        cursor.execute(query_raw, (raw_id,))
        resultado_raw = cursor.fetchone()
        
        if not resultado_raw:
            print(f"[PERM] ‚ùå RAW_ID {raw_id} n√£o encontrado")
            conn.close()
            return False
            
        conteudo_bruto = resultado_raw[0]
        print(f"[PERM] üìÑ Conte√∫do: {conteudo_bruto[:100]}...")
        
        # Extrair projeto
        try:
            import json
            dados = json.loads(conteudo_bruto)
            projeto = dados.get('projeto', '830')
        except:
            projeto = '830'
            
        print(f"[PERM] ‚úÖ Projeto: {projeto}")
        
        # Buscar todos os coordenadores e normalizar telefones para comparar
        query_coord = """
        SELECT TELEFONE, PERFIL, PROJETO, USUARIO FROM USUARIOS 
        WHERE PERFIL = 'COORDENADOR' AND PROJETO = ?
        """
        print(f"[PERM] üìù Buscando coordenadores do projeto {projeto}...")
        
        cursor.execute(query_coord, (projeto,))
        coordenadores = cursor.fetchall()
        
        print(f"[PERM] üìä Coordenadores do projeto {projeto}: {len(coordenadores)}")
        
        tem_permissao = False
        for coord in coordenadores:
            telefone_db = coord[0]
            telefone_db_normalizado = normalizar_telefone(telefone_db)
            projeto_coord = str(coord[2])
            usuario_coord = coord[3]
            
            print(f"[PERM] ÔøΩ Comparando: '{telefone_normalizado}' vs '{telefone_db_normalizado}' (Projeto: {projeto_coord}, Usuario: {usuario_coord})")
            
            if telefone_db_normalizado == telefone_normalizado:
                print(f"[PERM] ‚úÖ MATCH! {usuario_coord} autorizado para projeto {projeto}")
                tem_permissao = True
                break
        
        conn.close()
        
        if tem_permissao:
            print(f"[PERM] ‚úÖ Coordenador AUTORIZADO")
        else:
            print(f"[PERM] ‚ùå Coordenador SEM PERMISS√ÉO")
            
        return tem_permissao
        
    except Exception as e:
        print(f"[PERM] ‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return False
    """
    Processa a resposta do coordenador (APROVAR, REJEITAR, CORRIGIR)
    
    Args:
        button_id: ID do bot√£o clicado (ex: "aprovar_48", "rejeitar_48")
        telefone_coordenador: Telefone do coordenador que respondeu
        mensagem_adicional: Observa√ß√µes adicionais do coordenador
    """
    try:
        print(f"[APRV] üéØ Processando aprova√ß√£o do coordenador")
        print(f"[APRV] üîò Button ID: {button_id}")
        print(f"[APRV] üìû Coordenador: {telefone_coordenador}")
        print(f"[APRV] üí¨ Mensagem adicional: {mensagem_adicional}")
        
        # Extrair a√ß√£o e RAW_ID do button_id
        partes = button_id.split('_')
        if len(partes) != 2:
            print(f"[APRV] ‚ùå Button ID inv√°lido: {button_id}")
            return False
            
        acao = partes[0].upper()  # APROVAR, REJEITAR, CORRIGIR
        raw_id = partes[1]
        
        print(f"[APRV] üîÑ A√ß√£o: {acao}, RAW_ID: {raw_id}")
        
        # Verificar se o RAW_ID existe
        conn = conectar_db()
        cursor = conn.cursor()
        
        query_check = "SELECT ID, TELEFONE, PROJETO FROM PRE_APONTAMENTO_RAW WHERE ID = ?"
        cursor.execute(query_check, (raw_id,))
        registro = cursor.fetchone()
        
        if not registro:
            print(f"[APRV] ‚ùå RAW_ID {raw_id} n√£o encontrado")
            conn.close()
            return False
            
        raw_id_db, telefone_usuario, projeto = registro
        print(f"[APRV] ‚úÖ Registro encontrado - Usu√°rio: {telefone_usuario}, Projeto: {projeto}")
        
        # Verificar se o coordenador tem permiss√£o para este projeto
        query_perm = "SELECT COUNT(*) FROM USUARIOS WHERE TELEFONE = ? AND PROJETO = ? AND PERFIL = 'COORDENADOR'"
        cursor.execute(query_perm, (telefone_coordenador, projeto))
        tem_permissao = cursor.fetchone()[0] > 0
        
        if not tem_permissao:
            print(f"[APRV] ‚ùå Coordenador sem permiss√£o para projeto {projeto}")
            conn.close()
            return False
            
        print(f"[APRV] ‚úÖ Coordenador autorizado para projeto {projeto}")
        
        # Processar de acordo com a a√ß√£o
        timestamp_agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        if acao == "APROVAR":
            return aprovar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        elif acao == "REJEITAR":
            return rejeitar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        elif acao == "CORRIGIR":
            return solicitar_correcao_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        else:
            print(f"[APRV] ‚ùå A√ß√£o n√£o reconhecida: {acao}")
            return False
            
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO no processamento de aprova√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def aprovar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, observacoes, timestamp):
    """Aprova um pr√©-apontamento e move dados para tabelas definitivas"""
    try:
        print(f"[APRV] ========== INICIANDO APROVA√á√ÉO ==========")
        print(f"[APRV] üî¢ RAW_ID: {raw_id}")
        print(f"[APRV] üìû Telefone coordenador: {telefone_coordenador}")
        print(f"[APRV] üì± Telefone usu√°rio: {telefone_usuario}")
        print(f"[APRV] üìù Observa√ß√µes: {observacoes}")
        print(f"[APRV] ‚è∞ Timestamp: {timestamp}")
        
        print(f"[APRV] üîó Conectando ao banco de dados...")
        conn = conectar_db()
        cursor = conn.cursor()
        print(f"[APRV] ‚úÖ Conex√£o estabelecida")
        
        # 1. Atualizar status na tabela RAW (vers√£o simplificada)
        query_update = """
        UPDATE PRE_APONTAMENTO_RAW 
        SET STATUS = 'APROVADO'
        WHERE ID = ?
        """
        print(f"[APRV] üìù Query UPDATE (simplificada): {query_update}")
        print(f"[APRV] üìù Par√¢metros: id={raw_id}")
        
        cursor.execute(query_update, (raw_id,))
        rows_affected = cursor.rowcount
        print(f"[APRV] üìä Linhas afetadas pelo UPDATE: {rows_affected}")
        
        if rows_affected > 0:
            print(f"[APRV] ‚úÖ Status atualizado para APROVADO com sucesso!")
        else:
            print(f"[APRV] ‚ö†Ô∏è NENHUMA linha foi atualizada - RAW_ID {raw_id} pode n√£o existir!")
        
        # 2. Commit das mudan√ßas
        print(f"[APRV] üíæ Fazendo commit das mudan√ßas...")
        conn.commit()
        print(f"[APRV] ‚úÖ Commit realizado")
        
        conn.close()
        print(f"[APRV] üîó Conex√£o fechada")
        
        # 3. Notificar usu√°rio sobre aprova√ß√£o
        print(f"[APRV] üì§ Enviando notifica√ß√£o para usu√°rio...")
        resultado_notif_user = notificar_usuario_aprovacao(telefone_usuario, raw_id, "APROVADO", observacoes)
        print(f"[APRV] üì§ Notifica√ß√£o usu√°rio: {'‚úÖ Sucesso' if resultado_notif_user else '‚ùå Falha'}")
        
        # 4. Notificar coordenador sobre confirma√ß√£o
        print(f"[APRV] üì§ Enviando confirma√ß√£o para coordenador...")
        resultado_notif_coord = notificar_coordenador_confirmacao(telefone_coordenador, raw_id, "APROVADO")
        print(f"[APRV] üì§ Confirma√ß√£o coordenador: {'‚úÖ Sucesso' if resultado_notif_coord else '‚ùå Falha'}")
        
        print(f"[APRV] ‚úÖ APROVA√á√ÉO CONCLU√çDA COM SUCESSO!")
        return True
        
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO CR√çTICO na aprova√ß√£o: {e}")
        print(f"[APRV] üìç Tipo do erro: {type(e).__name__}")
        import traceback
        print(f"[APRV] üîç Stack trace completo:")
        traceback.print_exc()
        return False
        
        # 2. Mover dados do STAGING para tabelas definitivas
        # TODO: Implementar l√≥gica de movimenta√ß√£o para BOLETIM e PREMIOS definitivos
        # Por enquanto, apenas marcamos como aprovado
        
        conn.commit()
        conn.close()
        
        # 3. Notificar usu√°rio sobre aprova√ß√£o
        notificar_usuario_aprovacao(telefone_usuario, raw_id, "APROVADO", observacoes)
        
        # 4. Notificar coordenador sobre confirma√ß√£o
        notificar_coordenador_confirmacao(telefone_coordenador, raw_id, "APROVADO")
        
        print(f"[APRV] ‚úÖ Aprova√ß√£o conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO na aprova√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def rejeitar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, motivo, timestamp):
    """Rejeita um pr√©-apontamento"""
    try:
        print(f"[APRV] ‚ùå Iniciando rejei√ß√£o do RAW_ID {raw_id}")
        
        conn = conectar_db()
        cursor = conn.cursor()
        
        # 1. Atualizar status na tabela RAW (vers√£o simplificada)
        query_update = """
        UPDATE PRE_APONTAMENTO_RAW 
        SET STATUS = 'REJEITADO'
        WHERE ID = ?
        """
        cursor.execute(query_update, (raw_id))
        print(f"[APRV] ‚úÖ Status atualizado para REJEITADO")
        
        # 2. Remover dados das tabelas STAGING (opcional - pode manter para hist√≥rico)
        # Por enquanto, apenas marcamos como rejeitado
        
        conn.commit()
        conn.close()
        
        # 3. Notificar usu√°rio sobre rejei√ß√£o
        notificar_usuario_aprovacao(telefone_usuario, raw_id, "REJEITADO", motivo)
        
        # 4. Notificar coordenador sobre confirma√ß√£o  
        notificar_coordenador_confirmacao(telefone_coordenador, raw_id, "REJEITADO")
        
        print(f"[APRV] ‚úÖ Rejei√ß√£o conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO na rejei√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def solicitar_correcao_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, solicitacao, timestamp):
    """Solicita corre√ß√£o de um pr√©-apontamento"""
    try:
        print(f"[APRV] üîß Iniciando solicita√ß√£o de corre√ß√£o do RAW_ID {raw_id}")
        
        conn = conectar_db()
        cursor = conn.cursor()
        
        # 1. Atualizar status na tabela RAW (vers√£o simplificada)
        query_update = """
        UPDATE PRE_APONTAMENTO_RAW 
        SET STATUS = 'CORRECAO_SOLICITADA'
        WHERE ID = ?
        """
        cursor.execute(query_update, (raw_id))
        print(f"[APRV] ‚úÖ Status atualizado para CORRECAO_SOLICITADA")
        
        conn.commit()
        conn.close()
        
        # 2. Notificar usu√°rio sobre solicita√ß√£o de corre√ß√£o
        notificar_usuario_aprovacao(telefone_usuario, raw_id, "CORRECAO_SOLICITADA", solicitacao)
        
        # 3. Notificar coordenador sobre confirma√ß√£o
        notificar_coordenador_confirmacao(telefone_coordenador, raw_id, "CORRECAO_SOLICITADA")
        
        print(f"[APRV] ‚úÖ Solicita√ß√£o de corre√ß√£o enviada com sucesso!")
        return True
        
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO na solicita√ß√£o de corre√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def notificar_usuario_aprovacao(telefone_usuario, raw_id, status, observacoes=""):
    """Notifica o usu√°rio sobre o resultado da aprova√ß√£o"""
    try:
        print(f"[NOTIF_USER] üì± Notificando usu√°rio sobre {status}")
        
        emoji_status = {
            "APROVADO": "‚úÖ",
            "REJEITADO": "‚ùå", 
            "CORRECAO_SOLICITADA": "üîß"
        }
        
        status_texto = {
            "APROVADO": "APROVADO",
            "REJEITADO": "REJEITADO",
            "CORRECAO_SOLICITADA": "CORRE√á√ÉO SOLICITADA"
        }
        
        emoji = emoji_status.get(status, "‚ÑπÔ∏è")
        texto = status_texto.get(status, status)
        
        mensagem = f"""{emoji} *PR√â-APONTAMENTO #{raw_id} - {texto}*

{emoji} Seu pr√©-apontamento foi {texto.lower()} pelo coordenador.

"""
        
        if observacoes:
            mensagem += f"üí¨ *Observa√ß√µes do coordenador:*\n{observacoes}\n\n"
            
        if status == "APROVADO":
            mensagem += "üéâ *Seu apontamento foi aprovado!*\nOs dados foram transferidos para o sistema definitivo."
        elif status == "REJEITADO":
            mensagem += "‚ö†Ô∏è *Seu apontamento foi rejeitado.*\nVerifique as observa√ß√µes e envie um novo apontamento se necess√°rio."
        elif status == "CORRECAO_SOLICITADA":
            mensagem += "üîß *Corre√ß√£o necess√°ria.*\nPor favor, envie um novo apontamento com as corre√ß√µes solicitadas."
            
        mensagem += f"\n\nüìÖ *Processado em:* {formatar_data_amigavel(obter_data_brasilia())}"
        
        # Enviar via Z-API
        return enviar_mensagem_zapi(telefone_usuario, mensagem)
        
    except Exception as e:
        print(f"[NOTIF_USER] ‚ùå ERRO ao notificar usu√°rio: {e}")
        return False

def notificar_coordenador_confirmacao(telefone_coordenador, raw_id, acao):
    """Envia confirma√ß√£o para o coordenador sobre a a√ß√£o realizada"""
    try:
        print(f"[NOTIF_COORD] üì± Enviando confirma√ß√£o da a√ß√£o {acao}")
        
        emoji_acao = {
            "APROVADO": "‚úÖ",
            "REJEITADO": "‚ùå",
            "CORRECAO_SOLICITADA": "üîß"
        }
        
        emoji = emoji_acao.get(acao, "‚ÑπÔ∏è")
        
        mensagem = f"""{emoji} *A√á√ÉO PROCESSADA COM SUCESSO*

Pr√©-apontamento #{raw_id} foi {acao.lower()}.

üìÖ *Processado em:* {formatar_data_amigavel(obter_data_brasilia())}

‚úÖ O usu√°rio foi notificado automaticamente."""

        return enviar_mensagem_zapi(telefone_coordenador, mensagem)
        
    except Exception as e:
        print(f"[NOTIF_COORD] ‚ùå ERRO ao confirmar para coordenador: {e}")
        return False

def enviar_mensagem_zapi(telefone, mensagem):
    """Envia mensagem via Z-API"""
    try:
        import requests
        
        if not all([INSTANCE_ID, TOKEN, CLIENT_TOKEN]):
            print(f"[ZAPI] ‚ùå Credenciais Z-API n√£o configuradas")
            return False
            
        url_send = f"https://api.z-api.io/instances/{INSTANCE_ID}/token/{TOKEN}/send-text"
        
        payload = {
            "phone": telefone,
            "message": mensagem
        }
        
        headers = {
            "Content-Type": "application/json",
            "Client-Token": CLIENT_TOKEN
        }
        
        response = requests.post(url_send, json=payload, headers=headers)
        
        sucesso = response.status_code == 200
        print(f"[ZAPI] {'‚úÖ' if sucesso else '‚ùå'} Envio para {telefone}: {response.status_code}")
        
        return sucesso
        
    except Exception as e:
        print(f"[ZAPI] ‚ùå ERRO no envio: {e}")
        return False

def consultar_status_aprovacao(raw_id=None, telefone_coordenador=None):
    """Consulta status de aprova√ß√µes"""
    try:
        conn = conectar_db()
        cursor = conn.cursor()
        
        if raw_id:
            # Consultar um RAW_ID espec√≠fico
            query = """
            SELECT ID, STATUS, PROJETO, APROVADO_POR, DATA_APROVACAO, OBSERVACOES_APROVACAO
            FROM PRE_APONTAMENTO_RAW 
            WHERE ID = ?
            """
            cursor.execute(query, (raw_id,))
            resultado = cursor.fetchone()
            
            if resultado:
                print(f"üìä RAW_ID {raw_id}:")
                print(f"   Status: {resultado[1]}")
                print(f"   Projeto: {resultado[2]}")
                print(f"   Aprovado por: {resultado[3] or 'Pendente'}")
                print(f"   Data aprova√ß√£o: {resultado[4] or 'Pendente'}")
                print(f"   Observa√ß√µes: {resultado[5] or 'Nenhuma'}")
                return resultado
            else:
                print(f"‚ùå RAW_ID {raw_id} n√£o encontrado")
                return None
                
        elif telefone_coordenador:
            # Listar aprova√ß√µes do coordenador
            query = """
            SELECT ID, STATUS, PROJETO, DATA_APROVACAO
            FROM PRE_APONTAMENTO_RAW 
            WHERE APROVADO_POR = ?
            ORDER BY DATA_APROVACAO DESC
            """
            cursor.execute(query, (telefone_coordenador,))
            resultados = cursor.fetchall()
            
            print(f"üìã Aprova√ß√µes do coordenador {telefone_coordenador}:")
            for r in resultados:
                print(f"   RAW_ID {r[0]}: {r[1]} - Projeto {r[2]} - {r[3]}")
            return resultados
        
        else:
            # Listar √∫ltimas aprova√ß√µes
            query = """
            SELECT TOP 10 ID, STATUS, PROJETO, APROVADO_POR, DATA_APROVACAO
            FROM PRE_APONTAMENTO_RAW 
            WHERE STATUS != 'PENDENTE'
            ORDER BY DATA_APROVACAO DESC
            """
            cursor.execute(query)
            resultados = cursor.fetchall()
            
            print(f"üìã √öltimas 10 aprova√ß√µes:")
            for r in resultados:
                print(f"   RAW_ID {r[0]}: {r[1]} - Projeto {r[2]} - Por {r[3]} em {r[4]}")
            return resultados
            
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro na consulta: {e}")
        return None

def verificar_aprovacao_raw_50():
    """Verifica especificamente o RAW_ID 50 que acabou de ser aprovado"""
    print("üîç VERIFICANDO APROVA√á√ÉO DO RAW_ID 50:")
    resultado = consultar_status_aprovacao(raw_id=50)
    
    if resultado and resultado[1] == 'APROVADO':
        print("üéâ SUCESSO! RAW_ID 50 foi aprovado com sucesso!")
        return True
    else:
        print("‚ö†Ô∏è RAW_ID 50 ainda n√£o foi aprovado ou houve erro")
        return False

def processar_aprovacao_coordenador(button_id, telefone_coordenador, mensagem_adicional=""):
    """
    Processa a resposta do coordenador (APROVAR, REJEITAR, CORRIGIR)
    
    Args:
        button_id: ID do bot√£o clicado (ex: "aprovar_48", "rejeitar_48")
        telefone_coordenador: Telefone do coordenador que respondeu
        mensagem_adicional: Observa√ß√µes adicionais do coordenador
    """
    try:
        print(f"[APRV] ========== PROCESSANDO APROVA√á√ÉO ==========")
        print(f"[APRV] üîò Button ID: {button_id}")
        print(f"[APRV] üìû Coordenador: {telefone_coordenador}")
        print(f"[APRV] üí¨ Mensagem adicional: {mensagem_adicional}")
        
        # Extrair a√ß√£o e RAW_ID do button_id
        partes = button_id.split('_')
        if len(partes) != 2:
            print(f"[APRV] ‚ùå Button ID inv√°lido: {button_id}")
            return False
            
        acao = partes[0].upper()  # APROVAR, REJEITAR, CORRIGIR
        raw_id = partes[1]
        
        print(f"[APRV] üîÑ A√ß√£o: {acao}, RAW_ID: {raw_id}")
        
        # Verificar se o RAW_ID existe e buscar telefone do usu√°rio
        conn = conectar_db()
        cursor = conn.cursor()
        
        query_check = "SELECT ID, PHONE FROM PRE_APONTAMENTO_RAW WHERE ID = ?"
        cursor.execute(query_check, (raw_id,))
        registro = cursor.fetchone()
        
        if not registro:
            print(f"[APRV] ‚ùå RAW_ID {raw_id} n√£o encontrado")
            conn.close()
            return False
            
        raw_id_db, telefone_usuario = registro
        print(f"[APRV] ‚úÖ Registro encontrado - Usu√°rio: {telefone_usuario}")
        
        conn.close()
        
        # Processar de acordo com a a√ß√£o
        timestamp_agora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        if acao == "APROVAR":
            return aprovar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        elif acao == "REJEITAR":
            return rejeitar_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        elif acao == "CORRIGIR":
            return solicitar_correcao_pre_apontamento(raw_id, telefone_coordenador, telefone_usuario, mensagem_adicional, timestamp_agora)
            
        else:
            print(f"[APRV] ‚ùå A√ß√£o n√£o reconhecida: {acao}")
            return False
            
    except Exception as e:
        print(f"[APRV] ‚ùå ERRO no processamento de aprova√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False
